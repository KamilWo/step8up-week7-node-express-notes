{"mappings":"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","sources":["<anon>","src/client/assets/js/script.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", ()=>{\n    // --- Element Selectors ---\n    const noteForm = document.getElementById(\"note-form\");\n    const noteIdInput = document.getElementById(\"note-id\");\n    const noteTitleInput = document.getElementById(\"note-title\");\n    const noteContentInput = document.getElementById(\"note-content\");\n    const notesList = document.getElementById(\"notes-list\");\n    const clearBtn = document.getElementById(\"clear-btn\");\n    const API_URL = \"/api/notes\";\n    // --- API Functions ---\n    const fetchNotes = async ()=>{\n        try {\n            const response = await fetch(API_URL);\n            if (!response.ok) throw new Error(\"Failed to fetch notes\");\n            const notes = await response.json();\n            renderNotes(notes);\n        } catch (error) {\n            console.error(\"Error fetching notes:\", error);\n            notesList.innerHTML = \"<li>Error loading notes. Please try again later.</li>\";\n        }\n        noteTitleInput.focus();\n    };\n    const saveNote = async (note)=>{\n        const method = note.id ? \"PUT\" : \"POST\";\n        const url = note.id ? `${API_URL}/${note.id}` : API_URL;\n        try {\n            const response = await fetch(url, {\n                method: method,\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    title: note.title,\n                    content: note.content\n                })\n            });\n            if (!response.ok) throw new Error(`Failed to save note`);\n            clearForm();\n            fetchNotes(); // Refresh the list after saving\n        } catch (error) {\n            console.error(\"Error saving note:\", error);\n        }\n    };\n    const deleteNote = async (id)=>{\n        try {\n            const response = await fetch(`${API_URL}/${id}`, {\n                method: \"DELETE\"\n            });\n            // A 204 response has no content, so we just check if the status is ok.\n            if (!response.ok) throw new Error(\"Failed to delete note on the server.\");\n            // This is the key: after a successful deletion, re-fetch all notes.\n            fetchNotes();\n        } catch (error) {\n            console.error(\"Error deleting note:\", error);\n        }\n    };\n    // --- UI Functions ---\n    const renderNotes = (notes)=>{\n        notesList.innerHTML = \"\"; // Clear existing notes\n        if (notes.length === 0) {\n            notesList.innerHTML = \"<li>No notes yet. Create one!</li>\";\n            return;\n        }\n        notes.forEach((note)=>{\n            const li = document.createElement(\"li\");\n            li.dataset.id = note.id;\n            li.innerHTML = `\n        <div class=\"note-content\">\n          <h3>${note.title}</h3>\n          <p>${note.content}</p>\n        </div>\n        <div class=\"note-actions\">\n          <button class=\"btn btn-edit\">Edit</button>\n          <button class=\"btn btn-danger\">Delete</button>\n        </div>\n      `;\n            notesList.appendChild(li);\n        });\n    };\n    const clearForm = ()=>{\n        noteIdInput.value = \"\";\n        noteTitleInput.value = \"\";\n        noteContentInput.value = \"\";\n    };\n    const fillFormForEdit = (note)=>{\n        noteIdInput.value = note.id;\n        noteTitleInput.value = note.title;\n        noteContentInput.value = note.content;\n        noteTitleInput.focus();\n    };\n    // --- Event Listeners ---\n    noteForm.addEventListener(\"submit\", (e)=>{\n        e.preventDefault();\n        const note = {\n            id: noteIdInput.value,\n            title: noteTitleInput.value,\n            content: noteContentInput.value\n        };\n        saveNote(note);\n    });\n    notesList.addEventListener(\"click\", (e)=>{\n        const li = e.target.closest(\"li\");\n        if (!li) return;\n        const id = li.dataset.id;\n        if (e.target.classList.contains(\"btn-danger\")) {\n            if (confirm(\"Are you sure you want to delete this note?\")) deleteNote(id);\n        } else if (e.target.classList.contains(\"btn-edit\")) {\n            const title = li.querySelector(\"h3\").textContent;\n            const content = li.querySelector(\"p\").textContent;\n            fillFormForEdit({\n                id,\n                title,\n                content\n            });\n        }\n    });\n    clearBtn.addEventListener(\"click\", clearForm);\n    // Initial fetch when the page loads\n    fetchNotes();\n});\n\n//# sourceMappingURL=client.9823788b.js.map\n","document.addEventListener(\"DOMContentLoaded\", () => {\n  // --- Element Selectors ---\n  const noteForm = document.getElementById(\"note-form\");\n  const noteIdInput = document.getElementById(\"note-id\");\n  const noteTitleInput = document.getElementById(\"note-title\");\n  const noteContentInput = document.getElementById(\"note-content\");\n  const notesList = document.getElementById(\"notes-list\");\n  const clearBtn = document.getElementById(\"clear-btn\");\n\n  const API_URL = \"/api/notes\";\n\n  // --- API Functions ---\n\n  const fetchNotes = async () => {\n    try {\n      const response = await fetch(API_URL);\n      if (!response.ok) throw new Error(\"Failed to fetch notes\");\n      const notes = await response.json();\n      renderNotes(notes);\n    } catch (error) {\n      console.error(\"Error fetching notes:\", error);\n      notesList.innerHTML =\n        \"<li>Error loading notes. Please try again later.</li>\";\n    }\n    noteTitleInput.focus();\n  };\n\n  const saveNote = async (note) => {\n    const method = note.id ? \"PUT\" : \"POST\";\n    const url = note.id ? `${API_URL}/${note.id}` : API_URL;\n\n    try {\n      const response = await fetch(url, {\n        method: method,\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ title: note.title, content: note.content }),\n      });\n      if (!response.ok) throw new Error(`Failed to save note`);\n      clearForm();\n      fetchNotes(); // Refresh the list after saving\n    } catch (error) {\n      console.error(\"Error saving note:\", error);\n    }\n  };\n\n  const deleteNote = async (id) => {\n    try {\n      const response = await fetch(`${API_URL}/${id}`, { method: \"DELETE\" });\n      // A 204 response has no content, so we just check if the status is ok.\n      if (!response.ok) {\n        throw new Error(\"Failed to delete note on the server.\");\n      }\n      // This is the key: after a successful deletion, re-fetch all notes.\n      fetchNotes();\n    } catch (error) {\n      console.error(\"Error deleting note:\", error);\n    }\n  };\n\n  // --- UI Functions ---\n\n  const renderNotes = (notes) => {\n    notesList.innerHTML = \"\"; // Clear existing notes\n    if (notes.length === 0) {\n      notesList.innerHTML = \"<li>No notes yet. Create one!</li>\";\n      return;\n    }\n    notes.forEach((note) => {\n      const li = document.createElement(\"li\");\n      li.dataset.id = note.id;\n      li.innerHTML = `\n        <div class=\"note-content\">\n          <h3>${note.title}</h3>\n          <p>${note.content}</p>\n        </div>\n        <div class=\"note-actions\">\n          <button class=\"btn btn-edit\">Edit</button>\n          <button class=\"btn btn-danger\">Delete</button>\n        </div>\n      `;\n      notesList.appendChild(li);\n    });\n  };\n\n  const clearForm = () => {\n    noteIdInput.value = \"\";\n    noteTitleInput.value = \"\";\n    noteContentInput.value = \"\";\n  };\n\n  const fillFormForEdit = (note) => {\n    noteIdInput.value = note.id;\n    noteTitleInput.value = note.title;\n    noteContentInput.value = note.content;\n    noteTitleInput.focus();\n  };\n\n  // --- Event Listeners ---\n\n  noteForm.addEventListener(\"submit\", (e) => {\n    e.preventDefault();\n    const note = {\n      id: noteIdInput.value,\n      title: noteTitleInput.value,\n      content: noteContentInput.value,\n    };\n    saveNote(note);\n  });\n\n  notesList.addEventListener(\"click\", (e) => {\n    const li = e.target.closest(\"li\");\n    if (!li) return;\n\n    const id = li.dataset.id;\n    if (e.target.classList.contains(\"btn-danger\")) {\n      if (confirm(\"Are you sure you want to delete this note?\")) {\n        deleteNote(id);\n      }\n    } else if (e.target.classList.contains(\"btn-edit\")) {\n      const title = li.querySelector(\"h3\").textContent;\n      const content = li.querySelector(\"p\").textContent;\n      fillFormForEdit({ id, title, content });\n    }\n  });\n\n  clearBtn.addEventListener(\"click\", clearForm);\n\n  // Initial fetch when the page loads\n  fetchNotes();\n});\n"],"names":["document","addEventListener","noteForm","getElementById","noteIdInput","noteTitleInput","noteContentInput","notesList","clearBtn","API_URL","fetchNotes","response","fetch","ok","Error","notes","json","renderNotes","error","console","innerHTML","focus","saveNote","note","method","id","url","headers","body","JSON","stringify","title","content","clearForm","deleteNote","length","forEach","li","createElement","dataset","appendChild","value","e","preventDefault","target","closest","classList","contains","confirm","fillFormForEdit","querySelector","textContent"],"version":3,"file":"client.9823788b.js.map"}